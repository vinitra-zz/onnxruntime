# Defined as pipeline variables
# variables:
#   AgentPoolWin : 'Win-CPU'
#   AgentPoolLinux : 'Linux-CPU'
#   AgentPoolMacOS : 'macOS-10.13'

parameters:
  DoEsrp: 'false'

jobs:
- template: ../../templates/win-ci.yml
  parameters:
    AgentPool : $(AgentPoolWin)
    JobName: 'Windows_CI_Dev'
    BuildCommand:  '$(Build.SourcesDirectory)\tools\ci_build\build.py --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --cmake_path $(Build.BinariesDirectory)\cmake\bin\cmake.exe --ctest_path $(Build.BinariesDirectory)\cmake\bin\ctest.exe --disable_contrib_ops --enable_msvc_static_runtime --build_shared_lib --build_csharp --enable_onnx_tests'
    DoDebugBuild: 'false'
    DoNugetPack : 'true'
    DoCompliance: 'false'
    DoEsrp: ${{ parameters.DoEsrp }}
    NuPackScript: |
     msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /t:CreatePackage
     copy $(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo\*.nupkg $(Build.ArtifactStagingDirectory)


- template: ../../templates/win-x86-ci.yml
  parameters:
    AgentPool : $(AgentPoolWin)
    JobName: 'Windows_CI_Dev_x86'
    BuildCommand: '$(Build.SourcesDirectory)\tools\ci_build\build.py --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --cmake_path $(Build.BinariesDirectory)\cmake\bin\cmake.exe --ctest_path $(Build.BinariesDirectory)\cmake\bin\ctest.exe --disable_contrib_ops --enable_msvc_static_runtime --build_shared_lib  --build_csharp --enable_onnx_tests --x86'
    DoDebugBuild: 'false'
    DoNugetPack : 'true'
    DoCompliance: 'false'
    DoEsrp: ${{ parameters.DoEsrp }}
    NuPackScript: |
     msbuild $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj /p:Configuration=RelWithDebInfo /p:TargetArchitecture=x86 /t:CreatePackage
     cd $(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo\
     ren *.nupkg win-x86.zip
     copy $(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo\*zip $(Build.ArtifactStagingDirectory)

- template: ../../templates/win-ci-arm.yml
  parameters:
    AgentPool : $(AgentPoolWin)
    JobName: 'Windows_Arm64_Dev'
    BuildCommand:  '$(Build.SourcesDirectory)\tools\ci_build\build.py --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --cmake_path $(Build.BinariesDirectory)\cmake\bin\cmake.exe --ctest_path $(Build.BinariesDirectory)\cmake\bin\ctest.exe --disable_contrib_ops --enable_msvc_static_runtime --build_shared_lib --arm64'
    DoDebugBuild: 'false'
    DoNugetPack : 'true'
    DoCompliance: 'false'
    MsbuildArguments: '/m /p:platform=arm64'
    DoEsrp: ${{ parameters.DoEsrp }}
    ArtifactName: 'drop-nuget-arm64'
    NuPackScript: |
     mkdir $(Build.BinariesDirectory)\arm64\runtimes\win10-arm\native
     cd $(Build.BinariesDirectory)\arm64
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\onnxruntime.pdb $(Build.BinariesDirectory)\arm64\runtimes\win10-arm\native
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\onnxruntime.lib $(Build.BinariesDirectory)\arm64\runtimes\win10-arm\native
     copy $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\onnxruntime.dll $(Build.BinariesDirectory)\arm64\runtimes\win10-arm\native
     powershell -Command "Invoke-WebRequest http://stahlworks.com/dev/zip.exe -OutFile zip.exe"
     zip -r win10-arm.zip runtimes
     copy *.zip $(Build.ArtifactStagingDirectory)

- template: ../../templates/linux-ci.yml
  parameters:
    AgentPool : $(AgentPoolLinux)
    JobName: 'Linux_CI_Dev'
    BuildCommand: 'tools/ci_build/github/linux/run_dockerbuild.sh -o ubuntu16.04 -d cpu -r $(Build.BinariesDirectory) -x "--disable_contrib_ops"'
    DoNugetPack : 'true'
    ArtifactName: 'drop-linux'
    NuPackScript: |
     set -e -x
     mkdir $(Build.BinariesDirectory)/linux-x64
     cp $(Build.BinariesDirectory)/Release/libonnxruntime.so $(Build.BinariesDirectory)/linux-x64
     cd $(Build.BinariesDirectory)
     zip -r linux-x64.zip linux-x64
     cp $(Build.BinariesDirectory)/linux*.zip $(Build.ArtifactStagingDirectory)
     ls -al $(Build.ArtifactStagingDirectory)

- template: ../../templates/linux-ci.yml
  parameters:
    AgentPool : $(AgentPoolLinux)
    JobName: 'Linux_CI_Dev_x86'
    BuildCommand : 'tools/ci_build/github/linux/run_dockerbuild.sh -o ubuntu16.04 -d cpu -r $(Build.BinariesDirectory) -a x86 -x "--x86 --disable_contrib_ops"'
    DoNugetPack : 'true'
    ArtifactName: 'drop-linux-x86'
    NuPackScript: |
     set -e -x
     mkdir $(Build.BinariesDirectory)/linux-x86
     cp $(Build.BinariesDirectory)/Release/libonnxruntime.so $(Build.BinariesDirectory)/linux-x86
     cd $(Build.BinariesDirectory)
     zip -r linux-x86.zip linux-x86
     cp $(Build.BinariesDirectory)/linux*.zip $(Build.ArtifactStagingDirectory)
     ls -al $(Build.ArtifactStagingDirectory)

- template: ../../templates/mac-ci.yml
  parameters:
    AgentPool : $(AgentPoolMacOS)
    JobName: 'MacOS_CI_Dev'
    BuildCommand: 'python3 $(Build.SourcesDirectory)/tools/ci_build/build.py --build_dir $(Build.BinariesDirectory) --skip_submodule_sync --parallel --build_shared_lib --disable_contrib_ops --use_openmp --enable_onnx_tests --config RelWithDebInfo'
    DoNugetPack : 'true'
    NuPackScript: |
     set -e -x
     mkdir $(Build.BinariesDirectory)/osx-x64
     find $(Build.BinariesDirectory)
     cp $(Build.BinariesDirectory)/RelWithDebInfo/libonnxruntime.dylib $(Build.BinariesDirectory)/osx-x64/
     dsymutil $(Build.BinariesDirectory)/osx-x64/libonnxruntime.dylib -o $(Build.BinariesDirectory)/osx-x64/libonnxruntime.dylib.dSYM
     strip -S -x $(Build.BinariesDirectory)/osx-x64/libonnxruntime.dylib
     find $(Build.BinariesDirectory)/osx-x64
     cwd=`pwd`
     cd $(Build.BinariesDirectory)
     zip -r osx-x64.zip osx-x64
     cp $(Build.BinariesDirectory)/osx-x64.zip $(Build.ArtifactStagingDirectory)
     cd $cwd

- job: NuGet_Packaging
  pool: $(AgentPoolWin)
  dependsOn:
  - Windows_CI_Dev
  - Windows_CI_Dev_x86
  - Windows_Arm64_Dev
  - Linux_CI_Dev
  - Linux_CI_Dev_x86
  - MacOS_CI_Dev
  condition: succeeded()
  steps:
  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'drop-nuget'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
    continueOnError: true

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - Win-x86'
    inputs:
      artifactName: 'drop-win-x86-zip'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
    continueOnError: true

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - Arm64'
    inputs:
      artifactName: 'drop-nuget-arm64'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
    continueOnError: true

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - Linux'
    inputs:
      artifactName: 'drop-linux'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
    continueOnError: true

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - Linux-x86'
    inputs:
      artifactName: 'drop-linux-x86'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
    continueOnError: true

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - MacOS'
    inputs:
      artifactName: 'drop-osx'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
    continueOnError: true

  - script: |
     pushd $(Build.BinariesDirectory)\nuget-artifact
     dir
     powershell -Command "Invoke-WebRequest http://stahlworks.com/dev/unzip.exe -OutFile unzip.exe"
     powershell -Command "Invoke-WebRequest http://stahlworks.com/dev/zip.exe -OutFile zip.exe"
     set PATH=%CD%;%PATH%
     FOR /R %%i IN (*.nupkg) do (
         rename %%~ni.nupkg %%~ni.zip
         unzip %%~ni.zip -d %%~ni
         del /Q %%~ni.zip
         unzip win-x86.zip -d win-x86
         unzip win10-arm.zip -d win10-arm
         unzip linux-x64.zip -d linux-x64
         unzip linux-x86.zip -d linux-x86
         mkdir %%~ni\runtimes\win-x86
         mkdir %%~ni\runtimes\win10-arm
         mkdir %%~ni\runtimes\linux-x64
         mkdir %%~ni\runtimes\linux-x86
         mkdir %%~ni\runtimes\win-x86\native
         mkdir %%~ni\runtimes\win10-arm\native
         mkdir %%~ni\runtimes\linux-x64\native
         mkdir %%~ni\runtimes\linux-x86\native
         move win-x86\runtimes\win-x86\native\onnxruntime.dll %%~ni\runtimes\win-x86\native\onnxruntime.dll
         move win-x86\runtimes\win-x86\native\onnxruntime.lib %%~ni\runtimes\win-x86\native\onnxruntime.lib
         move win-x86\runtimes\win-x86\native\onnxruntime.pdb %%~ni\runtimes\win-x86\native\onnxruntime.pdb
         move win10-arm\runtimes\win10-arm\native\onnxruntime.lib %%~ni\runtimes\win10-arm\native\onnxruntime.lib
         move win10-arm\runtimes\win10-arm\native\onnxruntime.dll %%~ni\runtimes\win10-arm\native\onnxruntime.dll
         move win10-arm\runtimes\win10-arm\native\onnxruntime.pdb %%~ni\runtimes\win10-arm\native\onnxruntime.pdb
         move linux-x64\linux-x64\libonnxruntime.so %%~ni\runtimes\linux-x64\native\libonnxruntime.so
         move linux-x86\linux-x86\libonnxruntime.so %%~ni\runtimes\linux-x86\native\libonnxruntime.so
         unzip osx-x64.zip -d osx-x64
         dir osx-x64 /s
         mkdir %%~ni\runtimes\osx-x64
         mkdir %%~ni\runtimes\osx-x64\native
         move osx-x64\osx-x64\libonnxruntime.dylib %%~ni\runtimes\osx-x64\native\libonnxruntime.dylib
         move osx-x64\osx-x64\libonnxruntime.dylib.dSYM %%~ni\runtimes\osx-x64\native\libonnxruntime.dylib.dSYM
         pushd %%~ni
         zip -r ..\%%~ni.zip .
         popd
         move %%~ni.zip %%~ni.nupkg
     )
     popd
     copy $(Build.BinariesDirectory)\nuget-artifact\*.nupkg $(Build.ArtifactStagingDirectory)
    displayName: 'Bundle NuGet and other binaries'

  - template: ../../templates/esrp_nuget.yml
    parameters:
      DisplayName: 'ESRP - sign NuGet package'
      FolderPath: '$(Build.ArtifactStagingDirectory)'
      DoEsrp: ${{ parameters.DoEsrp }}

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Pipeline NuGet Artifact'
    inputs:
      artifactName: 'drop-signed-nuget'
      targetPath: '$(Build.ArtifactStagingDirectory)'

- template: test_all_os.yml
